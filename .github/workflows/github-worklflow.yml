name: Github Workfow Continues Development (CD)

on:
  push:
    branches: [ github-action ]
  pull_request:
    branches: [ master ]

env:
  SERVER: staging
  CONTAINER_NAME: tinder-clone-ws
  IMAGE: tinder-clone-ws
  IMAGE_TAG: "1.0"

jobs:
  Deploy-Staging:
    name: Staging Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Move to repository
        run: cd ${{ github.workspace }}

      - name: Decrypt firebase key
        run: ./.github/scripts/decrypt_secret.sh
        env:
          SECRET_PASSPHRASE: ${{ secrets.FIREBASE_PHASEPHRASE }}

      - name: Check list resources file
        run: ls resources/

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: build project
        run: ./gradlew clean installDist

      - name: Check List File
        run: ls

      - name: Create Tar file
        run: tar czf build.tar.gz ./build/install/tinder-clone/

      - name: Copy Builded File using scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          rm: true
          source: "build.tar.gz,Dockerfile.example"
          target: "tinder-clone"

      - name: Final build and deploy on container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: CONTAINER_NAME,IMAGE,IMAGE_TAG
          script_stop: true
          script: |
            cd tinder-clone
            tar xzf build.tar.gz
            mv build/install/tinder-clone/ .
            rm -r build
            mv Dockerfile.example Dockerfile
            docker rm -f $CONTAINER_NAME && echo "Container removed" || echo "Container does not exist"
            docker build -t $IMAGE:$IMAGE_TAG .
            docker run -dp 280:80 \
              --restart unless-stopped \
              --name $CONTAINER_NAME \
              --network klasster-dev \
              $IMAGE:1.0
            docker image prune -f

      - name: Send Notification Success Discord
        uses: appleboy/discord-action@master
        if: ${{ success() }}
        with:
          webhook_id: ${{ secrets.WEBHOOK_DISCORD_ID }}
          webhook_token: ${{ secrets.WEBHOOK_DISCORD_TOKEN }}
          username: "GitHub Bot"
          message: "Success build and deploy on server for branch ${{ github.ref }} \nBuild Number: ${{ github.run_number }} \nResult: ${{ job.status }}"

      - name: Send Notification Fail Discord
        uses: appleboy/discord-action@master
        if: ${{ failure() }}
        with:
          webhook_id: ${{ secrets.WEBHOOK_DISCORD_ID }}
          webhook_token: ${{ secrets.WEBHOOK_DISCORD_TOKEN }}
          username: "GitHub Bot"
          message: "Failed build and deploy on server for branch ${{ github.ref }} \nBuild Number: ${{ github.run_number }} \nResult: ${{ job.status }}"